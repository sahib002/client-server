{"ast":null,"code":"// Simple local authentication fallback\nconst LOCAL_STORAGE_KEY = 'local_auth_user';\nexport class LocalAuth {\n  static register(email, password) {\n    // Check if user already exists\n    if (this.users.find(user => user.email === email)) {\n      throw new Error('User already exists with this email');\n    }\n\n    // Add new user\n    const newUser = {\n      id: Date.now().toString(),\n      email,\n      password,\n      // In a real app, this should be hashed\n      createdAt: new Date().toISOString()\n    };\n    this.users.push(newUser);\n    localStorage.setItem('local_users', JSON.stringify(this.users));\n\n    // Auto login\n    this.login(email, password);\n    return newUser;\n  }\n  static login(email, password) {\n    const user = this.users.find(u => u.email === email && u.password === password);\n    if (!user) {\n      throw new Error('Invalid email or password');\n    }\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(user));\n    return user;\n  }\n  static logout() {\n    localStorage.removeItem(LOCAL_STORAGE_KEY);\n  }\n  static getCurrentUser() {\n    const userStr = localStorage.getItem(LOCAL_STORAGE_KEY);\n    return userStr ? JSON.parse(userStr) : null;\n  }\n  static isLoggedIn() {\n    return !!this.getCurrentUser();\n  }\n}\nLocalAuth.users = JSON.parse(localStorage.getItem('local_users') || '[]');","map":{"version":3,"names":["LOCAL_STORAGE_KEY","LocalAuth","register","email","password","users","find","user","Error","newUser","id","Date","now","toString","createdAt","toISOString","push","localStorage","setItem","JSON","stringify","login","u","logout","removeItem","getCurrentUser","userStr","getItem","parse","isLoggedIn"],"sources":["C:/Users/User/Desktop/Task Fast/client-server/client/src/firebase/localAuth.js"],"sourcesContent":["// Simple local authentication fallback\r\nconst LOCAL_STORAGE_KEY = 'local_auth_user';\r\n\r\nexport class LocalAuth {\r\n  static users = JSON.parse(localStorage.getItem('local_users') || '[]');\r\n\r\n  static register(email, password) {\r\n    // Check if user already exists\r\n    if (this.users.find(user => user.email === email)) {\r\n      throw new Error('User already exists with this email');\r\n    }\r\n\r\n    // Add new user\r\n    const newUser = {\r\n      id: Date.now().toString(),\r\n      email,\r\n      password, // In a real app, this should be hashed\r\n      createdAt: new Date().toISOString()\r\n    };\r\n\r\n    this.users.push(newUser);\r\n    localStorage.setItem('local_users', JSON.stringify(this.users));\r\n    \r\n    // Auto login\r\n    this.login(email, password);\r\n    return newUser;\r\n  }\r\n\r\n  static login(email, password) {\r\n    const user = this.users.find(u => u.email === email && u.password === password);\r\n    if (!user) {\r\n      throw new Error('Invalid email or password');\r\n    }\r\n\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(user));\r\n    return user;\r\n  }\r\n\r\n  static logout() {\r\n    localStorage.removeItem(LOCAL_STORAGE_KEY);\r\n  }\r\n\r\n  static getCurrentUser() {\r\n    const userStr = localStorage.getItem(LOCAL_STORAGE_KEY);\r\n    return userStr ? JSON.parse(userStr) : null;\r\n  }\r\n\r\n  static isLoggedIn() {\r\n    return !!this.getCurrentUser();\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA,MAAMA,iBAAiB,GAAG,iBAAiB;AAE3C,OAAO,MAAMC,SAAS,CAAC;EAGrB,OAAOC,QAAQA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAC/B;IACA,IAAI,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACJ,KAAK,KAAKA,KAAK,CAAC,EAAE;MACjD,MAAM,IAAIK,KAAK,CAAC,qCAAqC,CAAC;IACxD;;IAEA;IACA,MAAMC,OAAO,GAAG;MACdC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzBV,KAAK;MACLC,QAAQ;MAAE;MACVU,SAAS,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;IACpC,CAAC;IAED,IAAI,CAACV,KAAK,CAACW,IAAI,CAACP,OAAO,CAAC;IACxBQ,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACf,KAAK,CAAC,CAAC;;IAE/D;IACA,IAAI,CAACgB,KAAK,CAAClB,KAAK,EAAEC,QAAQ,CAAC;IAC3B,OAAOK,OAAO;EAChB;EAEA,OAAOY,KAAKA,CAAClB,KAAK,EAAEC,QAAQ,EAAE;IAC5B,MAAMG,IAAI,GAAG,IAAI,CAACF,KAAK,CAACC,IAAI,CAACgB,CAAC,IAAIA,CAAC,CAACnB,KAAK,KAAKA,KAAK,IAAImB,CAAC,CAAClB,QAAQ,KAAKA,QAAQ,CAAC;IAC/E,IAAI,CAACG,IAAI,EAAE;MACT,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;IAC9C;IAEAS,YAAY,CAACC,OAAO,CAAClB,iBAAiB,EAAEmB,IAAI,CAACC,SAAS,CAACb,IAAI,CAAC,CAAC;IAC7D,OAAOA,IAAI;EACb;EAEA,OAAOgB,MAAMA,CAAA,EAAG;IACdN,YAAY,CAACO,UAAU,CAACxB,iBAAiB,CAAC;EAC5C;EAEA,OAAOyB,cAAcA,CAAA,EAAG;IACtB,MAAMC,OAAO,GAAGT,YAAY,CAACU,OAAO,CAAC3B,iBAAiB,CAAC;IACvD,OAAO0B,OAAO,GAAGP,IAAI,CAACS,KAAK,CAACF,OAAO,CAAC,GAAG,IAAI;EAC7C;EAEA,OAAOG,UAAUA,CAAA,EAAG;IAClB,OAAO,CAAC,CAAC,IAAI,CAACJ,cAAc,CAAC,CAAC;EAChC;AACF;AA/CaxB,SAAS,CACbI,KAAK,GAAGc,IAAI,CAACS,KAAK,CAACX,YAAY,CAACU,OAAO,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}