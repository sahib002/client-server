{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\n\n// Global task state that can be shared across components\nlet globalTasks = [];\nlet globalListeners = [];\nlet currentUserEmail = null;\nconst useTasks = (userEmail = null) => {\n  _s();\n  const [tasks, setTasks] = useState(globalTasks);\n  const [loading, setLoading] = useState(true);\n\n  // Update current user email when it changes\n  useEffect(() => {\n    if (userEmail && userEmail !== currentUserEmail) {\n      currentUserEmail = userEmail;\n      // Clear tasks and refetch for new user\n      globalTasks = [];\n      fetchTasks();\n    }\n  }, [userEmail]);\n\n  // Register this component as a listener for task updates\n  useEffect(() => {\n    const updateTasks = newTasks => {\n      setTasks(newTasks);\n    };\n    globalListeners.push(updateTasks);\n    return () => {\n      globalListeners = globalListeners.filter(listener => listener !== updateTasks);\n    };\n  }, []);\n\n  // Function to notify all listeners when tasks change\n  const notifyListeners = useCallback(newTasks => {\n    globalTasks = newTasks;\n    globalListeners.forEach(listener => listener(newTasks));\n  }, []);\n\n  // Fetch tasks from API with user filtering\n  const fetchTasks = useCallback(async () => {\n    console.log('🔄 useTasks: Fetching tasks from API for user:', currentUserEmail || 'all users');\n    setLoading(true);\n    try {\n      // Add userEmail to query if available\n      const url = currentUserEmail ? `http://localhost:5000/api/tasks?userEmail=${encodeURIComponent(currentUserEmail)}` : 'http://localhost:5000/api/tasks';\n      const response = await fetch(url);\n      if (response.ok) {\n        const data = await response.json();\n        const tasksArray = data.tasks || [];\n        console.log('✅ useTasks: Fetched', tasksArray.length, 'tasks for user:', currentUserEmail);\n        notifyListeners(tasksArray);\n      } else {\n        console.error('❌ useTasks: API error');\n      }\n    } catch (err) {\n      console.error('❌ useTasks: Fetch failed:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [notifyListeners]);\n\n  // Initialize tasks on first mount\n  useEffect(() => {\n    if (globalTasks.length === 0 || currentUserEmail) {\n      fetchTasks();\n    } else {\n      setLoading(false);\n    }\n  }, [fetchTasks]);\n\n  // Listen for global refresh triggers (e.g., from AI agent chat)\n  useEffect(() => {\n    const onRefreshEvent = () => {\n      console.log('🛰️ useTasks: Received global tasks:refresh event');\n      fetchTasks();\n    };\n    window.addEventListener('tasks:refresh', onRefreshEvent);\n    // Optimistic updates from agent: apply mutation details if provided\n    const onMutated = e => {\n      try {\n        const {\n          toolName,\n          toolResult\n        } = e.detail || {};\n        if (!toolName || !toolResult) return;\n        console.log('⚡ useTasks: Applying optimistic mutation from agent:', toolName);\n        let next = [...globalTasks];\n        if (toolName === 'createTask' && toolResult.success && toolResult.task) {\n          next = [toolResult.task, ...next];\n        } else if (toolName === 'updateTask' && toolResult.success && toolResult.task) {\n          next = next.map(t => t._id === toolResult.task._id ? toolResult.task : t);\n        } else if (toolName === 'deleteTask' && toolResult.success && toolResult.id) {\n          next = next.filter(t => t._id !== toolResult.id);\n        } else {\n          // Fallback to full refresh if we don't recognize the payload\n          return fetchTasks();\n        }\n        notifyListeners(next);\n      } catch (err) {\n        console.warn('useTasks: optimistic update failed, refetching', err);\n        fetchTasks();\n      }\n    };\n    window.addEventListener('tasks:mutated', onMutated);\n    return () => {\n      window.removeEventListener('tasks:refresh', onRefreshEvent);\n      window.removeEventListener('tasks:mutated', onMutated);\n    };\n  }, [fetchTasks]);\n\n  // Refresh function that can be called from any component\n  const refreshTasks = useCallback(() => {\n    console.log('🔄 useTasks: Manual refresh requested for user:', currentUserEmail);\n    fetchTasks();\n  }, [fetchTasks]);\n  return {\n    tasks,\n    loading,\n    refreshTasks,\n    fetchTasks\n  };\n};\n_s(useTasks, \"N4OqUbBYkWQFkb70Ay7FToJcX6A=\");\nexport default useTasks;","map":{"version":3,"names":["useState","useEffect","useCallback","globalTasks","globalListeners","currentUserEmail","useTasks","userEmail","_s","tasks","setTasks","loading","setLoading","fetchTasks","updateTasks","newTasks","push","filter","listener","notifyListeners","forEach","console","log","url","encodeURIComponent","response","fetch","ok","data","json","tasksArray","length","error","err","onRefreshEvent","window","addEventListener","onMutated","e","toolName","toolResult","detail","next","success","task","map","t","_id","id","warn","removeEventListener","refreshTasks"],"sources":["C:/Users/User/Desktop/Task Fast/client-server/client/src/hooks/useTasks.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react'\r\n\r\n// Global task state that can be shared across components\r\nlet globalTasks = []\r\nlet globalListeners = []\r\nlet currentUserEmail = null\r\n\r\nconst useTasks = (userEmail = null) => {\r\n  const [tasks, setTasks] = useState(globalTasks)\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  // Update current user email when it changes\r\n  useEffect(() => {\r\n    if (userEmail && userEmail !== currentUserEmail) {\r\n      currentUserEmail = userEmail\r\n      // Clear tasks and refetch for new user\r\n      globalTasks = []\r\n      fetchTasks()\r\n    }\r\n  }, [userEmail])\r\n\r\n  // Register this component as a listener for task updates\r\n  useEffect(() => {\r\n    const updateTasks = (newTasks) => {\r\n      setTasks(newTasks)\r\n    }\r\n    \r\n    globalListeners.push(updateTasks)\r\n    \r\n    return () => {\r\n      globalListeners = globalListeners.filter(listener => listener !== updateTasks)\r\n    }\r\n  }, [])\r\n\r\n  // Function to notify all listeners when tasks change\r\n  const notifyListeners = useCallback((newTasks) => {\r\n    globalTasks = newTasks\r\n    globalListeners.forEach(listener => listener(newTasks))\r\n  }, [])\r\n\r\n  // Fetch tasks from API with user filtering\r\n  const fetchTasks = useCallback(async () => {\r\n    console.log('🔄 useTasks: Fetching tasks from API for user:', currentUserEmail || 'all users')\r\n    setLoading(true)\r\n    \r\n    try {\r\n      // Add userEmail to query if available\r\n      const url = currentUserEmail \r\n        ? `http://localhost:5000/api/tasks?userEmail=${encodeURIComponent(currentUserEmail)}`\r\n        : 'http://localhost:5000/api/tasks'\r\n        \r\n      const response = await fetch(url)\r\n      if (response.ok) {\r\n        const data = await response.json()\r\n        const tasksArray = data.tasks || []\r\n        console.log('✅ useTasks: Fetched', tasksArray.length, 'tasks for user:', currentUserEmail)\r\n        notifyListeners(tasksArray)\r\n      } else {\r\n        console.error('❌ useTasks: API error')\r\n      }\r\n    } catch (err) {\r\n      console.error('❌ useTasks: Fetch failed:', err)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }, [notifyListeners])\r\n\r\n  // Initialize tasks on first mount\r\n  useEffect(() => {\r\n    if (globalTasks.length === 0 || currentUserEmail) {\r\n      fetchTasks()\r\n    } else {\r\n      setLoading(false)\r\n    }\r\n  }, [fetchTasks])\r\n\r\n  // Listen for global refresh triggers (e.g., from AI agent chat)\r\n  useEffect(() => {\r\n    const onRefreshEvent = () => {\r\n      console.log('🛰️ useTasks: Received global tasks:refresh event')\r\n      fetchTasks()\r\n    }\r\n    window.addEventListener('tasks:refresh', onRefreshEvent)\r\n    // Optimistic updates from agent: apply mutation details if provided\r\n    const onMutated = (e) => {\r\n      try {\r\n        const { toolName, toolResult } = e.detail || {}\r\n        if (!toolName || !toolResult) return\r\n        console.log('⚡ useTasks: Applying optimistic mutation from agent:', toolName)\r\n        let next = [...globalTasks]\r\n        if (toolName === 'createTask' && toolResult.success && toolResult.task) {\r\n          next = [toolResult.task, ...next]\r\n        } else if (toolName === 'updateTask' && toolResult.success && toolResult.task) {\r\n          next = next.map(t => (t._id === toolResult.task._id ? toolResult.task : t))\r\n        } else if (toolName === 'deleteTask' && toolResult.success && toolResult.id) {\r\n          next = next.filter(t => t._id !== toolResult.id)\r\n        } else {\r\n          // Fallback to full refresh if we don't recognize the payload\r\n          return fetchTasks()\r\n        }\r\n        notifyListeners(next)\r\n      } catch (err) {\r\n        console.warn('useTasks: optimistic update failed, refetching', err)\r\n        fetchTasks()\r\n      }\r\n    }\r\n    window.addEventListener('tasks:mutated', onMutated)\r\n    return () => {\r\n      window.removeEventListener('tasks:refresh', onRefreshEvent)\r\n      window.removeEventListener('tasks:mutated', onMutated)\r\n    }\r\n  }, [fetchTasks])\r\n\r\n  // Refresh function that can be called from any component\r\n  const refreshTasks = useCallback(() => {\r\n    console.log('🔄 useTasks: Manual refresh requested for user:', currentUserEmail)\r\n    fetchTasks()\r\n  }, [fetchTasks])\r\n\r\n  return {\r\n    tasks,\r\n    loading,\r\n    refreshTasks,\r\n    fetchTasks\r\n  }\r\n}\r\n\r\nexport default useTasks\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}