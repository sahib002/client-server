{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\n\n// Global task state that can be shared across components\nlet globalTasks = [];\nlet globalListeners = [];\nconst useTasks = () => {\n  _s();\n  const [tasks, setTasks] = useState(globalTasks);\n  const [loading, setLoading] = useState(true);\n\n  // Register this component as a listener for task updates\n  useEffect(() => {\n    const updateTasks = newTasks => {\n      setTasks(newTasks);\n    };\n    globalListeners.push(updateTasks);\n    return () => {\n      globalListeners = globalListeners.filter(listener => listener !== updateTasks);\n    };\n  }, []);\n\n  // Function to notify all listeners when tasks change\n  const notifyListeners = useCallback(newTasks => {\n    globalTasks = newTasks;\n    globalListeners.forEach(listener => listener(newTasks));\n  }, []);\n\n  // Fetch tasks from API\n  const fetchTasks = useCallback(async () => {\n    console.log('🔄 useTasks: Fetching tasks from API...');\n    setLoading(true);\n    try {\n      const response = await fetch('http://localhost:5000/api/tasks');\n      if (response.ok) {\n        const data = await response.json();\n        const tasksArray = data.tasks || [];\n        console.log('✅ useTasks: Fetched', tasksArray.length, 'tasks - notifying all components');\n        notifyListeners(tasksArray);\n      } else {\n        console.error('❌ useTasks: API error');\n      }\n    } catch (err) {\n      console.error('❌ useTasks: Fetch failed:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [notifyListeners]);\n\n  // Initialize tasks on first mount\n  useEffect(() => {\n    if (globalTasks.length === 0) {\n      fetchTasks();\n    } else {\n      setLoading(false);\n    }\n  }, [fetchTasks]);\n\n  // Refresh function that can be called from any component\n  const refreshTasks = useCallback(() => {\n    console.log('🔄 useTasks: Manual refresh requested');\n    fetchTasks();\n  }, [fetchTasks]);\n  return {\n    tasks,\n    loading,\n    refreshTasks,\n    fetchTasks\n  };\n};\n_s(useTasks, \"2OS+Tyxwm+f8oYjBg0n1Zt5cbWA=\");\nexport default useTasks;","map":{"version":3,"names":["useState","useEffect","useCallback","globalTasks","globalListeners","useTasks","_s","tasks","setTasks","loading","setLoading","updateTasks","newTasks","push","filter","listener","notifyListeners","forEach","fetchTasks","console","log","response","fetch","ok","data","json","tasksArray","length","error","err","refreshTasks"],"sources":["C:/Users/User/Desktop/Task Fast/client-server/client/src/hooks/useTasks.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react'\r\n\r\n// Global task state that can be shared across components\r\nlet globalTasks = []\r\nlet globalListeners = []\r\n\r\nconst useTasks = () => {\r\n  const [tasks, setTasks] = useState(globalTasks)\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  // Register this component as a listener for task updates\r\n  useEffect(() => {\r\n    const updateTasks = (newTasks) => {\r\n      setTasks(newTasks)\r\n    }\r\n    \r\n    globalListeners.push(updateTasks)\r\n    \r\n    return () => {\r\n      globalListeners = globalListeners.filter(listener => listener !== updateTasks)\r\n    }\r\n  }, [])\r\n\r\n  // Function to notify all listeners when tasks change\r\n  const notifyListeners = useCallback((newTasks) => {\r\n    globalTasks = newTasks\r\n    globalListeners.forEach(listener => listener(newTasks))\r\n  }, [])\r\n\r\n  // Fetch tasks from API\r\n  const fetchTasks = useCallback(async () => {\r\n    console.log('🔄 useTasks: Fetching tasks from API...')\r\n    setLoading(true)\r\n    \r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/tasks')\r\n      if (response.ok) {\r\n        const data = await response.json()\r\n        const tasksArray = data.tasks || []\r\n        console.log('✅ useTasks: Fetched', tasksArray.length, 'tasks - notifying all components')\r\n        notifyListeners(tasksArray)\r\n      } else {\r\n        console.error('❌ useTasks: API error')\r\n      }\r\n    } catch (err) {\r\n      console.error('❌ useTasks: Fetch failed:', err)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }, [notifyListeners])\r\n\r\n  // Initialize tasks on first mount\r\n  useEffect(() => {\r\n    if (globalTasks.length === 0) {\r\n      fetchTasks()\r\n    } else {\r\n      setLoading(false)\r\n    }\r\n  }, [fetchTasks])\r\n\r\n  // Refresh function that can be called from any component\r\n  const refreshTasks = useCallback(() => {\r\n    console.log('🔄 useTasks: Manual refresh requested')\r\n    fetchTasks()\r\n  }, [fetchTasks])\r\n\r\n  return {\r\n    tasks,\r\n    loading,\r\n    refreshTasks,\r\n    fetchTasks\r\n  }\r\n}\r\n\r\nexport default useTasks\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;;AAExD;AACA,IAAIC,WAAW,GAAG,EAAE;AACpB,IAAIC,eAAe,GAAG,EAAE;AAExB,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACG,WAAW,CAAC;EAC/C,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMU,WAAW,GAAIC,QAAQ,IAAK;MAChCJ,QAAQ,CAACI,QAAQ,CAAC;IACpB,CAAC;IAEDR,eAAe,CAACS,IAAI,CAACF,WAAW,CAAC;IAEjC,OAAO,MAAM;MACXP,eAAe,GAAGA,eAAe,CAACU,MAAM,CAACC,QAAQ,IAAIA,QAAQ,KAAKJ,WAAW,CAAC;IAChF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMK,eAAe,GAAGd,WAAW,CAAEU,QAAQ,IAAK;IAChDT,WAAW,GAAGS,QAAQ;IACtBR,eAAe,CAACa,OAAO,CAACF,QAAQ,IAAIA,QAAQ,CAACH,QAAQ,CAAC,CAAC;EACzD,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMM,UAAU,GAAGhB,WAAW,CAAC,YAAY;IACzCiB,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACtDV,UAAU,CAAC,IAAI,CAAC;IAEhB,IAAI;MACF,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;MAC/D,IAAID,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClC,MAAMC,UAAU,GAAGF,IAAI,CAACjB,KAAK,IAAI,EAAE;QACnCY,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEM,UAAU,CAACC,MAAM,EAAE,kCAAkC,CAAC;QACzFX,eAAe,CAACU,UAAU,CAAC;MAC7B,CAAC,MAAM;QACLP,OAAO,CAACS,KAAK,CAAC,uBAAuB,CAAC;MACxC;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZV,OAAO,CAACS,KAAK,CAAC,2BAA2B,EAAEC,GAAG,CAAC;IACjD,CAAC,SAAS;MACRnB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACM,eAAe,CAAC,CAAC;;EAErB;EACAf,SAAS,CAAC,MAAM;IACd,IAAIE,WAAW,CAACwB,MAAM,KAAK,CAAC,EAAE;MAC5BT,UAAU,CAAC,CAAC;IACd,CAAC,MAAM;MACLR,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACQ,UAAU,CAAC,CAAC;;EAEhB;EACA,MAAMY,YAAY,GAAG5B,WAAW,CAAC,MAAM;IACrCiB,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;IACpDF,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,OAAO;IACLX,KAAK;IACLE,OAAO;IACPqB,YAAY;IACZZ;EACF,CAAC;AACH,CAAC;AAAAZ,EAAA,CAlEKD,QAAQ;AAoEd,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}