{"ast":null,"code":"import { auth } from \"./firebase\";\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, sendPasswordResetEmail, sendEmailVerification, updatePassword } from \"firebase/auth\";\nexport const doCreateUserWithEmailAndPassword = async (email, password) => {\n  try {\n    return await createUserWithEmailAndPassword(auth, email, password);\n  } catch (error) {\n    console.error(\"Registration error:\", error);\n    if (error.code === 'auth/network-request-failed') {\n      throw new Error('Network connection failed. Please check your internet connection and try again.');\n    }\n    throw error;\n  }\n};\nexport const doSignInWithEmailAndPassword = async (email, password) => {\n  try {\n    return await signInWithEmailAndPassword(auth, email, password);\n  } catch (error) {\n    console.error(\"Sign-in error:\", error);\n    if (error.code === 'auth/network-request-failed') {\n      throw new Error('Network connection failed. Please check your internet connection and try again.');\n    }\n    if (error.code === 'auth/user-not-found') {\n      throw new Error('No account found with this email. Please register first.');\n    }\n    if (error.code === 'auth/wrong-password') {\n      throw new Error('Incorrect password. Please try again.');\n    }\n    if (error.code === 'auth/invalid-email') {\n      throw new Error('Invalid email address format.');\n    }\n    throw error;\n  }\n};\nexport const doSignOut = () => {\n  return auth.signOut();\n};\nexport const doPasswordReset = email => {\n  return sendPasswordResetEmail(auth, email);\n};\nexport const doPasswordChange = password => {\n  return updatePassword(auth.currentUser, password);\n};\nexport const doSendEmailVerification = () => {\n  return sendEmailVerification(auth.currentUser, {\n    url: `${window.location.origin}/home`\n  });\n};","map":{"version":3,"names":["auth","createUserWithEmailAndPassword","signInWithEmailAndPassword","sendPasswordResetEmail","sendEmailVerification","updatePassword","doCreateUserWithEmailAndPassword","email","password","error","console","code","Error","doSignInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","doPasswordChange","currentUser","doSendEmailVerification","url","window","location","origin"],"sources":["C:/Users/User/Desktop/Task Fast/client-server/client/src/firebase/auth.js"],"sourcesContent":["import { auth } from \"./firebase\";\r\nimport {\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n  sendPasswordResetEmail,\r\n  sendEmailVerification,\r\n  updatePassword,\r\n} from \"firebase/auth\";\r\n\r\nexport const doCreateUserWithEmailAndPassword = async (email, password) => {\r\n  try {\r\n    return await createUserWithEmailAndPassword(auth, email, password);\r\n  } catch (error) {\r\n    console.error(\"Registration error:\", error);\r\n    if (error.code === 'auth/network-request-failed') {\r\n      throw new Error('Network connection failed. Please check your internet connection and try again.');\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const doSignInWithEmailAndPassword = async (email, password) => {\r\n  try {\r\n    return await signInWithEmailAndPassword(auth, email, password);\r\n  } catch (error) {\r\n    console.error(\"Sign-in error:\", error);\r\n    if (error.code === 'auth/network-request-failed') {\r\n      throw new Error('Network connection failed. Please check your internet connection and try again.');\r\n    }\r\n    if (error.code === 'auth/user-not-found') {\r\n      throw new Error('No account found with this email. Please register first.');\r\n    }\r\n    if (error.code === 'auth/wrong-password') {\r\n      throw new Error('Incorrect password. Please try again.');\r\n    }\r\n    if (error.code === 'auth/invalid-email') {\r\n      throw new Error('Invalid email address format.');\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const doSignOut = () => {\r\n  return auth.signOut();\r\n};\r\n\r\nexport const doPasswordReset = (email) => {\r\n  return sendPasswordResetEmail(auth, email);\r\n};\r\n\r\nexport const doPasswordChange = (password) => {\r\n  return updatePassword(auth.currentUser, password);\r\n};\r\n\r\nexport const doSendEmailVerification = () => {\r\n  return sendEmailVerification(auth.currentUser, {\r\n    url: `${window.location.origin}/home`,\r\n  });\r\n};"],"mappings":"AAAA,SAASA,IAAI,QAAQ,YAAY;AACjC,SACEC,8BAA8B,EAC9BC,0BAA0B,EAC1BC,sBAAsB,EACtBC,qBAAqB,EACrBC,cAAc,QACT,eAAe;AAEtB,OAAO,MAAMC,gCAAgC,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACzE,IAAI;IACF,OAAO,MAAMP,8BAA8B,CAACD,IAAI,EAAEO,KAAK,EAAEC,QAAQ,CAAC;EACpE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,IAAIA,KAAK,CAACE,IAAI,KAAK,6BAA6B,EAAE;MAChD,MAAM,IAAIC,KAAK,CAAC,iFAAiF,CAAC;IACpG;IACA,MAAMH,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMI,4BAA4B,GAAG,MAAAA,CAAON,KAAK,EAAEC,QAAQ,KAAK;EACrE,IAAI;IACF,OAAO,MAAMN,0BAA0B,CAACF,IAAI,EAAEO,KAAK,EAAEC,QAAQ,CAAC;EAChE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,IAAIA,KAAK,CAACE,IAAI,KAAK,6BAA6B,EAAE;MAChD,MAAM,IAAIC,KAAK,CAAC,iFAAiF,CAAC;IACpG;IACA,IAAIH,KAAK,CAACE,IAAI,KAAK,qBAAqB,EAAE;MACxC,MAAM,IAAIC,KAAK,CAAC,0DAA0D,CAAC;IAC7E;IACA,IAAIH,KAAK,CAACE,IAAI,KAAK,qBAAqB,EAAE;MACxC,MAAM,IAAIC,KAAK,CAAC,uCAAuC,CAAC;IAC1D;IACA,IAAIH,KAAK,CAACE,IAAI,KAAK,oBAAoB,EAAE;MACvC,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;IAClD;IACA,MAAMH,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMK,SAAS,GAAGA,CAAA,KAAM;EAC7B,OAAOd,IAAI,CAACe,OAAO,CAAC,CAAC;AACvB,CAAC;AAED,OAAO,MAAMC,eAAe,GAAIT,KAAK,IAAK;EACxC,OAAOJ,sBAAsB,CAACH,IAAI,EAAEO,KAAK,CAAC;AAC5C,CAAC;AAED,OAAO,MAAMU,gBAAgB,GAAIT,QAAQ,IAAK;EAC5C,OAAOH,cAAc,CAACL,IAAI,CAACkB,WAAW,EAAEV,QAAQ,CAAC;AACnD,CAAC;AAED,OAAO,MAAMW,uBAAuB,GAAGA,CAAA,KAAM;EAC3C,OAAOf,qBAAqB,CAACJ,IAAI,CAACkB,WAAW,EAAE;IAC7CE,GAAG,EAAE,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM;EAChC,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}